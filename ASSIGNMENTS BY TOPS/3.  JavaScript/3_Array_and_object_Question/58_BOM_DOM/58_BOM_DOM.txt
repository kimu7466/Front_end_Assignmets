Q.59 What is Bom vs Dom in JS? 


In JavaScript, BOM (Browser Object Model) and DOM (Document Object Model) are two different concepts that deal with how the browser handles web pages and their content. Here’s a detailed explanation of both:

=== BOM (Browser Object Model) ===

The Browser Object Model (BOM) is a set of objects provided by the browser that allows JavaScript to interact with the browser itself. This includes things like the window containing the web page, the browser history, the browser’s navigation, and more.

===# Key Components of BOM: ===

1. window: The global object representing the browser window. All global JavaScript objects, functions, and variables automatically become members of the "window" object.
    javascript
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    // Example: Alerting the height and width of the browser window

    alert("Width: ${window.innerWidth}, Height: ${window.innerHeight}");
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

2. navigator: Provides information about the browser.
    javascript
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    // Example: Getting browser information

    console.log(navigator.userAgent);
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

3. location: Provides information about the current URL and allows you to redirect the browser to a new URL.
    javascript
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    // Example: Redirecting to another page

    location.href = "https://www.example.com";
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

4. history: Allows navigation through the browser’s session history.
    javascript
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    // Example: Going back one page in history

    history.back();
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

5. screen: Provides information about the user’s screen.
    javascript
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    // Example: Displaying screen width and height

    console.log("Screen width: ${screen.width}, height: ${screen.height}");
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

6. alert, confirm, prompt: Functions for interacting with the user.
    javascript
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    // Example: Alert box

    alert('Hello, world!');
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

=== DOM (Document Object Model) ===

The Document Object Model (DOM) is a programming interface for web documents. It represents the page so that programs can change the document structure, style, and content. The DOM represents the document as nodes and objects, allowing languages like JavaScript to interact with the page content.

=== Key Components of DOM: ===

1. document: Represents the entire HTML document. It's the entry point to the web page’s content.
    javascript
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    // Example: Accessing the document title

    console.log(document.title);
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

2. Element Access:
    -> "getElementById":
        javascript
        >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        // Example: Getting an element by ID

        const element = document.getElementById('myElement');
        >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    -> "getElementsByClassName":
        javascript
        >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        // Example: Getting elements by class name

        const elements = document.getElementsByClassName('myClass');
        >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    -> "getElementsByTagName":
        javascript
        >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        // Example: Getting elements by tag name

        const elements = document.getElementsByTagName('div');
        >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    -> "querySelector" and "querySelectorAll":
        javascript
        >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        // Example: Using querySelector

        const element = document.querySelector('.myClass');
        // Example: Using querySelectorAll

        const elements = document.querySelectorAll('div.myClass');
        >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

3. Modifying Content:
    -> "innerHTML" and "textContent":
        javascript
        >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        // Example: Changing inner HTML

        document.getElementById('myElement').innerHTML = '<p>New content</p>';
        // Example: Changing text content

        document.getElementById('myElement').textContent = 'New text content';
        >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

4. Creating and Appending Elements:
    javascript
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    // Example: Creating a new element and appending it to the DOM

    const newElement = document.createElement('div');
    newElement.textContent = 'Hello, World!';
    document.body.appendChild(newElement);
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

5. Event Handling:
    javascript
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    // Example: Adding an event listener

    document.getElementById('myButton').addEventListener('click', function() {
        alert('Button clicked!');
    });
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

=== Summary
->  ===BOM: Deals with browser components other than the document, like history, location, navigator, and screen. It's focused on browser operations and control.
-> DOM: Deals with the document's content itself. It represents the structure of a webpage and allows manipulation of HTML and CSS.

Understanding both BOM and DOM is essential for effective web development, as they provide the tools necessary to interact with and manipulate the browser environment and webpage content dynamically.

